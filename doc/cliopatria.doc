\documentclass[11pt]{article}
\usepackage{times}
\usepackage{pl}
\usepackage{html}
\makeindex

\onefile
\htmloutput{html}				% Output directory
\htmlmainfile{index}				% Main document file
\bodycolor{white}				% Page colour
\sloppy

\begin{document}

\title{ClioPatria: the SWI-Prolog Semantic Web Server}
\author{Jan Wielemaker \\
	University of Amsterdam, VU University of Amsterdam \\
	The Netherlands \\
	E-mail: \email{J.Wielemaker@cs.vu.nl}}

\maketitle

\begin{abstract}
SWI-Prolog offers an extensive library for loading, saving and querying
Semantic Web documents called the
`\url[semweb]{http://www.swi-prolog.org/pldoc/package/semweb.html}'
package. Internally, the query language is `Prolog', building on top of
an efficient implementation of a predicate rdf/3 expressing the content
of the triple store.

ClioPatria provides a ready-ro-run web-server on top of this
infrastructure. The web-server contains a SPARQL endpoint, user
management and web-based tools to help the developer analysing the
loaded RDF.
\end{abstract}

\vfill

\pagebreak
\tableofcontents

\vfill
\vfill

\newpage


\section{Introduction}

ClioPatria unifies the SWI-Prolog general Web support and Semantic Web
support, providing both a starting point for dedicated applications and
a platform for exchange of RDF-based data using a standardised language
and protocol.

`Out of the box', ClioPatria can be used to load and study RDF data. RDF
data can be studied using the interactive SPARQL interface, a graph
browser or the Prolog toplevel.

ClioPatria is first of all intended as a base-level infrastructure for
building RDF-based applications. This is achieved by loading additional
Prolog code that implements the required application logic on top of
the SWI-Prolog semweb package and optionally ClioPatria extensions
thereof.  Next, there are several options to make this application
logic available:

\begin{itemize}
    \item Define `APIs': HTTP handlers that emit JSON or XML that is
    handled by a presentation layer that resides either in the browser
    (using AJAX technology) or in another web-server.

    \item Define HTTP handlers that emit HTML pages, possibly enriched
    with AJAX components.  This technique is used by the development
    tools that are part of ClioPatria.  More information on providing
    web-services from Prolog can be found on the SWI-Prolog
    \url[HOWTO pages]{http://www.swi-prolog.org/howto/http/}
\end{itemize}

The choice between these two options depends on external requirements,
such as skills of the involved developers, integration with other
software and the amount of interaction. Serving HTML pages from Prolog
requires knowledge of HTML and CSS and the SWI-Prolog HTML-writer
library. It provides good modularity and reuse. Alternatively, the UI
can be programmed in e.g., flash or a generic JavaScript library such as
YUI. This approach makes the UI independent from the server, but
requires programming in two languages: Prolog to define the APIs and
flash/JavaScript/... to program the UI.


\section{Query Languages}

ClioPatria supports two query languages:
\url[SPARQL]{http://www.w3.org/TR/rdf-sparql-query/} and
\url[SeRQL]{http://www.openrdf.org}. For both languages we provide an
interactive service that presents the results as a human-readable HTML
table and an API that presents its result as RDF/XML or XML according to
the HTTP protocol definition for the query language.

ClioPatria's SPARQL endpoint is intended to support clients that are
designed for to work with a SPARQL endpoint. E.g., if an application
requires a vocabulary browser and such a browser is available as a
JavaScript library that formulates SPARQL queries, ClioPatria's SPARQL
endpoints allow reuse of this component. In our experience, SPARQL often
needs additional application logic that is located near the data to
provide a task-specific API that drives the user interface. Locating
this logic near the data is required to avoid protocol and latency
overhead.  RDF-based application logic is a perfect match for Prolog and
the RDF data is much easier queried through the Prolog RDF libraries
than through SPARQL.

For both SPARQL and SeRQL, queries are translated to a complex Prolog
goal calling rdf/3 to resolve edges in the graph and calls to predicates
from rdfql/rdfql_runtime.pl that realise constraints imposed by the
SeRQL \const{WHERE} clause and SPARQL \const{FILTER} clauses.


\subsection{SPARQL Support}

SPARQL support is based on the SPARQL specification, versioned April 6,
2006.  Status:

\begin{shortlist}
    \item No optimization of literal operations.  Because many SPARQL
	  operations require type-translations that depend on the
	  literal found, many of these operations are slow.  The engine
	  does optimize graph expressions.
    \item Incomplete value-testing, notably on xsd:dateTime
    \item Incomplete ORDER BY support.  Only ascending and all values
          are compared lexically.
    \item Passes current test-suite, except tests affected by the above
          or acknowledged as errornous.
\end{shortlist}


\subsection{SeRQL Support}

SeRQL support and compatibility is based on development version
20040820, with additional support for the new 1.2 syntax and some of the
built-in functions. Both SeRQL and the HTTP API are fully defined in the
Sesame documentation.


\section{Installation and Administration}

\subsection{Getting started}

Create run.pl from run.pl.in. On Unix system, run =|./configure|= to
accompish this. On Windows, double click setup.pl. The created file
run.pl loads and starts the server. There are several configuration
options that may be selected by editing run.pl according to the comments
in this file.

Next, start the server by running =|./run.pl|= (Unix) or double-clicking
run.pl (Windows). Now direct your browser to the server, using the
default setup this is \url{http://localhost:3020}. If no users are
defined the browser will prompt to enter the administrative password.
After that the admin and anonymous users are created. Accounts can be
created and modified by users with administrative rights through the
\emph{Admin/Users} link in the menu.

\subsection{Configuring the server}

To configure the server, login as \const{admin} and click
\textsf{Admin/Settings}. Edit settings and hit \textsf{Apply} to save
them. In most cases you will have to restart the server before the new
settings take effect.\footnote{BUG: indicate when and make more settings
act without restarting}.


\subsection{Restarting from scratch: where is the data kept?}

Data is kept in the following files. Each of these can be removed.

\begin{itemize}
    \item \file{settings.db}
This keeps settings that do not have their default value.  You
can freely edit this file if the server is not running.  Note that
the settings can change the locations of the items below.

    \item \file{users.db}
This keeps the registered users and their permissions.  You can
freely edit this file if the server is not running.  Passwords
are stored as MD5-hashes.

    \item \file{RDF-store}
This directory holds backup of the RDF data. Each named-graph is
represented by two (optional) files. The base of this file is an encoded
version of the graph-name. The extensions are \fileext{trp} for
quick-load snapshots and \fileext{jrn} for \jargon{journal} files. See
the SWI-Prolog \url[Semantic Web
package]{http://www.swi-prolog.org/packages/semweb.html} for details.
You can freely remove a graph by removing both files if the server is
not running.  Similar, you can remove the journal to restore a graph
to its initial state after loading it from the source-data.

    \item \file{httpd.log}
Keeps a log of HTTP interactions. Note that on heavily loaded servers
this can be a significant slow-down and the file can become huge.
Logging can be disabled either by not loading library(http/http_log) in
the startup script (see run.pl) or by clearing \textit{File in which to
log HTTP requests} in the settings-page.

On Unix systems, this file can be moved or removed at any time.  The
server will start a new log-file. On Windows this will give a sharing
violation.\footnote{The HTTP log library needs a portable mechanism to
deal with growing logfiles.}
\end{itemize}


\section{Security issues}

HTTP Communication with the server, including usernames and passwords,
is in cleartext and therefore sensitive to sniffing. The overall
security of the server is unknown.   It is advised to run the server
as user with minimal access rights, only providing write access to
the user database file.


\section{Downloading}

ClioPatria is available from its
\url[GIT]{http://git-scm.com/}
\url[repository]{http://www.swi-prolog.org/home/pl/git/ClioPatria.git}
using the following commands:

\begin{code}
% git clone http://www.swi-prolog.org/home/pl/git/ClioPatria.git
\end{code}


\subsection*{Acknowledgements}

The SeRQL server has been realised as part of the \url[HOPS
project]{http://www.hops-fp6.org} and could not have been done without
Sesame and feedback from Jeen Broekstra and Maarten Menken from the Free
University of Amsterdam (VU). Adding SPARQL support has been realised as
part of the E-culture sub-project of Dutch MultiMedia project. Overall
cleanup and documentation is realised within the
\url[Europeana]{http://www.europeana.eu/portal/} project.

\printindex

\end{document}

