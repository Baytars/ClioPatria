\documentclass[11pt]{article}
\usepackage{times}
\usepackage{pl}
\usepackage{html}
\makeindex

\onefile
\htmloutput{html}				% Output directory
\htmlmainfile{index}				% Main document file
\bodycolor{white}				% Page colour
\sloppy

\begin{document}

\title{SWI-Prolog Semantic Web Server}
\author{Jan Wielemaker \\
	University of Amsterdam, VU University of Amsterdam \\
	The Netherlands \\
	E-mail: \email{J.Wielemaker@cs.vu.nl}}

\maketitle

\begin{abstract}
SWI-Prolog offers an extensive library for loading, saving and querying
Semantic Web documents. Internally, the query language is `Prolog',
building on top of an efficient implementation of a predicate rdf/3
expressing the content of the triple store.

ClioPatria provides a ready-ro-run web-server on top of this
infrastructure. The web-server contains a SPARQL endpoint, user
management and various web-based development tools.
\end{abstract}

\vfill

\pagebreak
\tableofcontents

\vfill
\vfill

\newpage


\section{Introduction}

The SWI-Prolog Semantic Web Server unifies the SWI-Prolog general Web
support and Semantic Web support, providing both a starting point for
dedicated applications and a platform for exchange of RDF-based data
using a standardised language and protocol.


\section{Query Languages}

The current server supports two query languages:
\url[SPARQL]{http://www.w3.org/TR/rdf-sparql-query/} and
\url[SeRQL]{http://www.openrdf.org}.
For both languages we provide an interactive service that presents
the results as a human-readable HTML table, a service presenting its
result as RDF/XML or XML that follows the HTTP protocol definition for
the query language and the possibility to query the local database using
a query language in Prolog.

For both query languages, queries are translated to a complex Prolog
goal calling rdf/3 to resolve edges in the graph and calls to predicates
from rdfql/rdfql_runtime.pl that realise constraints imposed by the
SeRQL \const{WHERE} clause and SPARQL \const{FILTER} clauses.


\subsection{SPARQL Support}

SPARQL support is based on the SPARQL specification, versioned April 6,
2006.  Status:

\begin{shortlist}
    \item No optimization of literal operations.  Because many SPARQL
	  operations require type-translations that depend on the
	  literal found, many of these operations are slow.  The engine
	  does optimize graph expressions.
    \item Incomplete value-testing, notably on xsd:dateTime
    \item Incomplete ORDER BY support.  Only ascending and all values
          are compared lexically.
    \item Passes current test-suite, except tests affected by the above
          or acknowledged as errornous.
\end{shortlist}


\subsection{SeRQL Support}

SeRQL support and compatibility is based on development version
20040820, with additional support for the new 1.2 syntax and some of the
built-in functions. Both SeRQL and the HTTP API are fully defined in the
Sesame documentation.


\section{Installation and Administration}

\subsection{Getting started}

Create run.pl from run.pl.in. On Unix system, run =|./configure|= to
accompish this. On Windows, double click setup.pl. The created file
run.pl loads and starts the server. There are several configuration
options that may be selected by editing run.pl according to the comments
in this file.

Next, start the server by running =|./run.pl|= (Unix) or double-clicking
run.pl (Windows). Now direct your browser to the server, using the
default setup this is \url{http://localhost:3020}. If no users are
defined the browser will prompt to enter the administrative password.
After that the admin and anonymous users are created. Accounts can be
created and modified by users with administrative rights through the
\emph{List users ...} link in the menu.

\subsection{Configuring the server}

To configure the server, login as \const{admin} and click
\textsf{Settings...}. Edit settings and hit \textsf{Apply} to save them.
In most cases you will have to restart the server before the new
settings take effect.\footnote{BUG: indicate when and make more settings
act without restarting}.


\subsection{Restarting from scratch: where is the data kept?}

Data is kept on the following places. Each of these can be removed.

\begin{itemize}
    \item \file{settings.db}
This keeps settings that do not have their default value.  You
can freely edit this file if the server is not running.  Note that
the settings can change the locations of the items below.

    \item \file{users.db}
This keeps the registered users and their permissions.  You can
freely edit this file if the server is not running.  Passwords
are stored as MD5-hashes.

    \item \file{RDF-store}
This directory holds backup of the RDF data. Each named-graph is
represented by two (optional) files. The base of this file is an encoded
version of the graph-name. The extensions are \fileext{trp} for
quick-load snapshots and \fileext{jrn} for \jargon{journal} files. See
the SWI-Prolog \url[Semantic Web
package]{http://www.swi-prolog.org/packages/semweb.html} for details.
You can freely remove a graph by removing both files if the server is
not running.

    \item \file{httpd.log}
Keeps a log of HTTP interactions.  Note that on heavily loaded servers
this can be a significant slow-down and the file can become very big.
Clear \textit{File in which to log HTTP requests} to stop logging.

On Unix systems, this file can be moved or removed at any time.  The
system will start a new log-file. On Windows this will give a sharing
violation.
\end{itemize}


\section{Security issues}

HTTP Communication with the server, including usernames and passwords,
is in cleartext and therefore sensitive to sniffing. The overall
security of the server is unknown.   It is advised to run the server
as user with minimal access rights, only providing write access to
the user database file.


\section{Downloading}

ClioPatria is available from its
\url[GIT]{http://git-scm.com/}
\url[repository]{http://eculture.cs.vu.nl/git/ClioPatria.git}
using the following commands:

\begin{code}
% git clone git://eculture.cs.vu.nl/home/git/ClioPatria.git
\end{code}


\subsection*{Acknowledgements}

The SeRQL server has been realised as part of the \url[HOPS
project]{http://www.hops-fp6.org} and could not have been done without
Sesame and feedback from Jeen Broekstra and Maarten Menken from the Free
University of Amsterdam (VU). Adding SPARQL support has been realised as
part of the E-culture sub-project of Dutch MultiMedia project. Various
extensions and cleanup has been realised within
\url[Europeana]{http://www.europeana.eu/portal/}.

\printindex

\end{document}

